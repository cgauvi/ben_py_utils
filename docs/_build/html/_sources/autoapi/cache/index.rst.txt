:py:mod:`cache`
===============

.. py:module:: cache

.. autoapi-nested-parse::

   Created on September 15 2021
   @author: charles gauvin

   Callable class used to cache long query results that can be used with the @wrapper syntax



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cache.Cache_wrapper




Attributes
~~~~~~~~~~

.. autoapisummary::

   cache.logger


.. py:data:: logger
   

   

.. py:class:: Cache_wrapper(path_cache, pd_save_index=False, force_overwrite=False)

   Semi fancy wrapper implemented as callable class that caches results to a parquet file.

   Can be used as such:

   @Cache_wrapper(path_cache='bla/blo.parquet')
   def foo():
       pass

   Tries the following file formats in order and moves to next only in case of failure:

   1) .parquet
   2) extension considered in name (e.g. csv or geojson if path_cache = 'bla.csv')
   3) if Geodf, alternative geoformat (either shp or geojson )


   :param path_cache: Path of destination file with parquet extention
   :type path_cache: str
   :param pd_save_index: Save pandas index?
   :type pd_save_index: boolean
   :param force_overwrite: Run the function even the results have been cached
   :type force_overwrite: boolean

   .. py:method:: _read_existing_file() -> Union[pandas.DataFrame, geopandas.GeoDataFrame]

      Try to read back an existing file from cache

      :returns: _description_
      :rtype: Union[pd.DataFrame, gpd.GeoDataFrame]


   .. py:method:: _create_new_file(fun, *kws, **kwargs) -> Union[pandas.DataFrame, geopandas.GeoDataFrame]

      Run fun(*kws, **kwargs) and cache the results

      :param fun: function to run
      :type fun: _type_

      :returns: df created by fun + cached
      :rtype: Union[pd.DataFrame, gpd.GeoDataFrame]


   .. py:method:: __call__(fun)



